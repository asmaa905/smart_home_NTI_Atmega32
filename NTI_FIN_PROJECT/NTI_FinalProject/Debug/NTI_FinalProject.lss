
NTI_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00002708  0000279c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000b6  008000b6  000027f2  2**0
                  ALLOC
  3 .stab         000022a4  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e8f  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005927  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007820  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000870b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000094b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000098a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 12 	call	0x241a	; 0x241a <main>
      8a:	0c 94 82 13 	jmp	0x2704	; 0x2704 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ea       	ldi	r26, 0xAE	; 174
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ea       	ldi	r24, 0xAE	; 174
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_voidUARTInit>:
#include "MUART_interface.h"
#include "MUART_config.h"
#include "MUART_private.h"

void MUART_voidUARTInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Step 1 : TX Enable */
	SET_BIT(MUART_UCSRB_REGISTER,TXEN_BIN);
     b4e:	aa e2       	ldi	r26, 0x2A	; 42
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e2       	ldi	r30, 0x2A	; 42
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	/* Step 2 : RX Enable*/
	SET_BIT(MUART_UCSRB_REGISTER,RXEN_BIN);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24
	/* Step 3 : UART mode selection */
    #if (MUART_OPERATION_MODE == MUART_AsynchronousOperation)
	CLR_BIT(MUART_UCSRC_REGISTER,UMSEL_bin);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7b       	andi	r24, 0xBF	; 191
     b76:	8c 93       	st	X, r24
	SET_BIT(MUART_UCSRC_REGISTER,UCSZ1_bin);
	SET_BIT(MUART_UCSRC_REGISTER,UCSZ0_bin);
	SET_BIT(MUART_UCSRB_REGISTER,UCSZ2_BIN);
    #else
	/* choose register C */
	SET_BIT(MUART_UCSRC_REGISTER,URSEL_bin);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
	/* write in register C */
	MUART_UCSRC_REGISTER = MUART_DATA_BITS<<1;
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	80 83       	st	Z, r24
    #endif
	/* Step 5 : configure the stop bit */
	MUART_UCSRC_REGISTER = MUART_STOP_BIT <<3;
     b8e:	e0 e4       	ldi	r30, 0x40	; 64
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	10 82       	st	Z, r1
	/* Step 6 : configure the parity bit  */
	//choose Register UBBRH
	CLR_BIT(MUART_UCSRC_REGISTER,URSEL_bin);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	8c 93       	st	X, r24
	MUART_UCSRC_REGISTER = MUART_PARITY_BIT>>8;
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
	/* Step 7 : configure the baud rate */
	MUART_UBRRL_REGISTER = MUART_BOUD_RATE;
     ba8:	e9 e2       	ldi	r30, 0x29	; 41
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	83 e3       	ldi	r24, 0x33	; 51
     bae:	80 83       	st	Z, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <MUART_voidTransmitData>:

void MUART_voidTransmitData(u8 copy_u8Data)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	/*  */
	while(GET_BIT(MUART_UCSRA_REGISTER,UDRE_BIN)==0);
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 95       	swap	r24
     bca:	86 95       	lsr	r24
     bcc:	87 70       	andi	r24, 0x07	; 7
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	81 70       	andi	r24, 0x01	; 1
     bd4:	90 70       	andi	r25, 0x00	; 0
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	a1 f3       	breq	.-24     	; 0xbc2 <MUART_voidTransmitData+0xc>
	MUART_UDR_REGISTER = copy_u8Data;
     bda:	ec e2       	ldi	r30, 0x2C	; 44
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	80 83       	st	Z, r24
}
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <MUART_u8ReceiveData>:

u8 MUART_u8ReceiveData(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ReceivedData ;
	/* Wait until data is received */
	while(GET_BIT(MUART_UCSRA_REGISTER,RXC_BIN)==0);
     bf4:	eb e2       	ldi	r30, 0x2B	; 43
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 23       	and	r24, r24
     bfc:	dc f7       	brge	.-10     	; 0xbf4 <MUART_u8ReceiveData+0xa>
	/* Access UDR register to read data */
	Local_u8ReceivedData = MUART_UDR_REGISTER;
     bfe:	ec e2       	ldi	r30, 0x2C	; 44
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ReceivedData;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
}
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <MUART_voidSendString>:

void MUART_voidSendString(u8 *copy_ptr)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	00 d0       	rcall	.+0      	; 0xc16 <MUART_voidSendString+0x6>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <MUART_voidSendString+0x8>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <MUART_voidSendString+0xa>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
	u32 i=0;
     c22:	19 82       	std	Y+1, r1	; 0x01
     c24:	1a 82       	std	Y+2, r1	; 0x02
     c26:	1b 82       	std	Y+3, r1	; 0x03
     c28:	1c 82       	std	Y+4, r1	; 0x04
     c2a:	15 c0       	rjmp	.+42     	; 0xc56 <MUART_voidSendString+0x46>
	while(copy_ptr[i] != '\0')
	{
		MUART_voidTransmitData(copy_ptr[i]);
     c2c:	29 81       	ldd	r18, Y+1	; 0x01
     c2e:	3a 81       	ldd	r19, Y+2	; 0x02
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	fc 01       	movw	r30, r24
     c36:	e2 0f       	add	r30, r18
     c38:	f3 1f       	adc	r31, r19
     c3a:	80 81       	ld	r24, Z
     c3c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidTransmitData>
		i++;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	a1 1d       	adc	r26, r1
     c4c:	b1 1d       	adc	r27, r1
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	ab 83       	std	Y+3, r26	; 0x03
     c54:	bc 83       	std	Y+4, r27	; 0x04
}

void MUART_voidSendString(u8 *copy_ptr)
{
	u32 i=0;
	while(copy_ptr[i] != '\0')
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	fc 01       	movw	r30, r24
     c60:	e2 0f       	add	r30, r18
     c62:	f3 1f       	adc	r31, r19
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	09 f7       	brne	.-62     	; 0xc2c <MUART_voidSendString+0x1c>
	{
		MUART_voidTransmitData(copy_ptr[i]);
		i++;
	}
}
     c6a:	26 96       	adiw	r28, 0x06	; 6
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"


u8 DIO_u8SetPinDirection (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	2e 97       	sbiw	r28, 0x0e	; 14
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	8a 83       	std	Y+2, r24	; 0x02
     c92:	6b 83       	std	Y+3, r22	; 0x03
     c94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	88 30       	cpi	r24, 0x08	; 8
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <DIO_u8SetPinDirection+0x26>
     ca0:	bc c1       	rjmp	.+888    	; 0x101a <DIO_u8SetPinDirection+0x39e>
	{
		switch(Copy_u8PortId)
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3e 87       	std	Y+14, r19	; 0x0e
     caa:	2d 87       	std	Y+13, r18	; 0x0d
     cac:	8d 85       	ldd	r24, Y+13	; 0x0d
     cae:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <DIO_u8SetPinDirection+0x3c>
     cb6:	7d c0       	rjmp	.+250    	; 0xdb2 <DIO_u8SetPinDirection+0x136>
     cb8:	2d 85       	ldd	r18, Y+13	; 0x0d
     cba:	3e 85       	ldd	r19, Y+14	; 0x0e
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	2c f4       	brge	.+10     	; 0xccc <DIO_u8SetPinDirection+0x50>
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	71 f0       	breq	.+28     	; 0xce6 <DIO_u8SetPinDirection+0x6a>
     cca:	a5 c1       	rjmp	.+842    	; 0x1016 <DIO_u8SetPinDirection+0x39a>
     ccc:	2d 85       	ldd	r18, Y+13	; 0x0d
     cce:	3e 85       	ldd	r19, Y+14	; 0x0e
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <DIO_u8SetPinDirection+0x5c>
     cd6:	d3 c0       	rjmp	.+422    	; 0xe7e <DIO_u8SetPinDirection+0x202>
     cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cda:	9e 85       	ldd	r25, Y+14	; 0x0e
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <DIO_u8SetPinDirection+0x68>
     ce2:	33 c1       	rjmp	.+614    	; 0xf4a <DIO_u8SetPinDirection+0x2ce>
     ce4:	98 c1       	rjmp	.+816    	; 0x1016 <DIO_u8SetPinDirection+0x39a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8PinDirection)
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	3c 87       	std	Y+12, r19	; 0x0c
     cee:	2b 87       	std	Y+11, r18	; 0x0b
     cf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	91 05       	cpc	r25, r1
     cf8:	51 f0       	breq	.+20     	; 0xd0e <DIO_u8SetPinDirection+0x92>
     cfa:	2b 85       	ldd	r18, Y+11	; 0x0b
     cfc:	3c 85       	ldd	r19, Y+12	; 0x0c
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	71 f1       	breq	.+92     	; 0xd60 <DIO_u8SetPinDirection+0xe4>
     d04:	8b 85       	ldd	r24, Y+11	; 0x0b
     d06:	9c 85       	ldd	r25, Y+12	; 0x0c
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	a9 f0       	breq	.+42     	; 0xd36 <DIO_u8SetPinDirection+0xba>
     d0c:	50 c0       	rjmp	.+160    	; 0xdae <DIO_u8SetPinDirection+0x132>
			{
			case DIO_u8_OUTPUT          : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);  break;
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_u8SetPinDirection+0xb0>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_u8SetPinDirection+0xac>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	73 c1       	rjmp	.+742    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_FLOATING  : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);  break;
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinDirection+0xd8>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinDirection+0xd4>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	5e c1       	rjmp	.+700    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_PULLED_UP : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
     d60:	aa e3       	ldi	r26, 0x3A	; 58
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ea e3       	ldi	r30, 0x3A	; 58
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_u8SetPinDirection+0x100>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	2a 95       	dec	r18
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_u8SetPinDirection+0xfc>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
			                              SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);/*activate internal pull up resistor*/
     d86:	ab e3       	ldi	r26, 0x3B	; 59
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	eb e3       	ldi	r30, 0x3B	; 59
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_u8SetPinDirection+0x128>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_u8SetPinDirection+0x124>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	37 c1       	rjmp	.+622    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			                              break;
			default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	35 c1       	rjmp	.+618    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8PinDirection)
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	3a 87       	std	Y+10, r19	; 0x0a
     dba:	29 87       	std	Y+9, r18	; 0x09
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	51 f0       	breq	.+20     	; 0xdda <DIO_u8SetPinDirection+0x15e>
     dc6:	29 85       	ldd	r18, Y+9	; 0x09
     dc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	31 05       	cpc	r19, r1
     dce:	71 f1       	breq	.+92     	; 0xe2c <DIO_u8SetPinDirection+0x1b0>
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	a9 f0       	breq	.+42     	; 0xe02 <DIO_u8SetPinDirection+0x186>
     dd8:	50 c0       	rjmp	.+160    	; 0xe7a <DIO_u8SetPinDirection+0x1fe>
			{
			case DIO_u8_OUTPUT          : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);  break;
     dda:	a7 e3       	ldi	r26, 0x37	; 55
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e3       	ldi	r30, 0x37	; 55
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_u8SetPinDirection+0x17c>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_u8SetPinDirection+0x178>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	0d c1       	rjmp	.+538    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_FLOATING  : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);  break;
     e02:	a7 e3       	ldi	r26, 0x37	; 55
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_u8SetPinDirection+0x1a4>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_u8SetPinDirection+0x1a0>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	f8 c0       	rjmp	.+496    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_PULLED_UP : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
     e2c:	a7 e3       	ldi	r26, 0x37	; 55
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e3       	ldi	r30, 0x37	; 55
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_u8SetPinDirection+0x1cc>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	2a 95       	dec	r18
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_u8SetPinDirection+0x1c8>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
			                              SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);/*activate internal pull up resistor*/
     e52:	a8 e3       	ldi	r26, 0x38	; 56
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e8 e3       	ldi	r30, 0x38	; 56
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_u8SetPinDirection+0x1f4>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_u8SetPinDirection+0x1f0>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	d1 c0       	rjmp	.+418    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			                              break;
			default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
     e7a:	19 82       	std	Y+1, r1	; 0x01
     e7c:	cf c0       	rjmp	.+414    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			}
			break;
		case DIO_u8_PORTC :
			switch (Copy_u8PinDirection)
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	38 87       	std	Y+8, r19	; 0x08
     e86:	2f 83       	std	Y+7, r18	; 0x07
     e88:	8f 81       	ldd	r24, Y+7	; 0x07
     e8a:	98 85       	ldd	r25, Y+8	; 0x08
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	51 f0       	breq	.+20     	; 0xea6 <DIO_u8SetPinDirection+0x22a>
     e92:	2f 81       	ldd	r18, Y+7	; 0x07
     e94:	38 85       	ldd	r19, Y+8	; 0x08
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	71 f1       	breq	.+92     	; 0xef8 <DIO_u8SetPinDirection+0x27c>
     e9c:	8f 81       	ldd	r24, Y+7	; 0x07
     e9e:	98 85       	ldd	r25, Y+8	; 0x08
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	a9 f0       	breq	.+42     	; 0xece <DIO_u8SetPinDirection+0x252>
     ea4:	50 c0       	rjmp	.+160    	; 0xf46 <DIO_u8SetPinDirection+0x2ca>
			{
			case DIO_u8_OUTPUT          : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);  break;
     ea6:	a4 e3       	ldi	r26, 0x34	; 52
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e4 e3       	ldi	r30, 0x34	; 52
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_u8SetPinDirection+0x248>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_u8SetPinDirection+0x244>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	a7 c0       	rjmp	.+334    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_FLOATING  : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);  break;
     ece:	a4 e3       	ldi	r26, 0x34	; 52
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e4 e3       	ldi	r30, 0x34	; 52
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_u8SetPinDirection+0x270>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_u8SetPinDirection+0x26c>
     ef0:	80 95       	com	r24
     ef2:	84 23       	and	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	92 c0       	rjmp	.+292    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_PULLED_UP : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
     ef8:	a4 e3       	ldi	r26, 0x34	; 52
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e4 e3       	ldi	r30, 0x34	; 52
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_u8SetPinDirection+0x298>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	2a 95       	dec	r18
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_u8SetPinDirection+0x294>
     f18:	80 95       	com	r24
     f1a:	84 23       	and	r24, r20
     f1c:	8c 93       	st	X, r24
			                              SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);/*activate internal pull up resistor*/
     f1e:	a5 e3       	ldi	r26, 0x35	; 53
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e3       	ldi	r30, 0x35	; 53
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_u8SetPinDirection+0x2c0>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_u8SetPinDirection+0x2bc>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	6b c0       	rjmp	.+214    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			                              break;
			default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
     f46:	19 82       	std	Y+1, r1	; 0x01
     f48:	69 c0       	rjmp	.+210    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			}
			break;
		case DIO_u8_PORTD :
			switch (Copy_u8PinDirection)
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3e 83       	std	Y+6, r19	; 0x06
     f52:	2d 83       	std	Y+5, r18	; 0x05
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	51 f0       	breq	.+20     	; 0xf72 <DIO_u8SetPinDirection+0x2f6>
     f5e:	2d 81       	ldd	r18, Y+5	; 0x05
     f60:	3e 81       	ldd	r19, Y+6	; 0x06
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	71 f1       	breq	.+92     	; 0xfc4 <DIO_u8SetPinDirection+0x348>
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	a9 f0       	breq	.+42     	; 0xf9a <DIO_u8SetPinDirection+0x31e>
     f70:	50 c0       	rjmp	.+160    	; 0x1012 <DIO_u8SetPinDirection+0x396>
			{
			case DIO_u8_OUTPUT          : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);  break;
     f72:	a1 e3       	ldi	r26, 0x31	; 49
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e1 e3       	ldi	r30, 0x31	; 49
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinDirection+0x314>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinDirection+0x310>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	41 c0       	rjmp	.+130    	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_FLOATING  : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);  break;
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_u8SetPinDirection+0x33c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_u8SetPinDirection+0x338>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	2c c0       	rjmp	.+88     	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			case DIO_u8_INPUT_PULLED_UP : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
     fc4:	a1 e3       	ldi	r26, 0x31	; 49
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e1 e3       	ldi	r30, 0x31	; 49
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinDirection+0x364>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	2a 95       	dec	r18
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinDirection+0x360>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
			                              SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);/*activate internal pull up resistor*/
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_u8SetPinDirection+0x38c>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_u8SetPinDirection+0x388>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	05 c0       	rjmp	.+10     	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			                              break;
			default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	03 c0       	rjmp	.+6      	; 0x101c <DIO_u8SetPinDirection+0x3a0>
			}
			break;
			default :  Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Port number*/
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	01 c0       	rjmp	.+2      	; 0x101c <DIO_u8SetPinDirection+0x3a0>
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Pin number*/
    101a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	2e 96       	adiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_u8SetPinValue+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_u8SetPinValue+0x8>
    1038:	00 d0       	rcall	.+0      	; 0x103a <DIO_u8SetPinValue+0xa>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8a 83       	std	Y+2, r24	; 0x02
    1040:	6b 83       	std	Y+3, r22	; 0x03
    1042:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId<=DIO_u8_PIN7)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_u8SetPinValue+0x20>
    104e:	e8 c0       	rjmp	.+464    	; 0x1220 <DIO_u8SetPinValue+0x1f0>
	{
		switch(Copy_u8PortId)
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3e 83       	std	Y+6, r19	; 0x06
    1058:	2d 83       	std	Y+5, r18	; 0x05
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <DIO_u8SetPinValue+0x36>
    1064:	48 c0       	rjmp	.+144    	; 0x10f6 <DIO_u8SetPinValue+0xc6>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <DIO_u8SetPinValue+0x4a>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	71 f0       	breq	.+28     	; 0x1094 <DIO_u8SetPinValue+0x64>
    1078:	d1 c0       	rjmp	.+418    	; 0x121c <DIO_u8SetPinValue+0x1ec>
    107a:	2d 81       	ldd	r18, Y+5	; 0x05
    107c:	3e 81       	ldd	r19, Y+6	; 0x06
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <DIO_u8SetPinValue+0x56>
    1084:	69 c0       	rjmp	.+210    	; 0x1158 <DIO_u8SetPinValue+0x128>
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	91 05       	cpc	r25, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <DIO_u8SetPinValue+0x62>
    1090:	94 c0       	rjmp	.+296    	; 0x11ba <DIO_u8SetPinValue+0x18a>
    1092:	c4 c0       	rjmp	.+392    	; 0x121c <DIO_u8SetPinValue+0x1ec>
		{
		case DIO_u8_PORTA :
			if(Copy_u8PinValue == DIO_u8_HIGH)      SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <DIO_u8SetPinValue+0x92>
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8SetPinValue+0x88>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8SetPinValue+0x84>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	b0 c0       	rjmp	.+352    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else if (Copy_u8PinValue == DIO_u8_LOW) CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	88 23       	and	r24, r24
    10c6:	a9 f4       	brne	.+42     	; 0x10f2 <DIO_u8SetPinValue+0xc2>
    10c8:	ab e3       	ldi	r26, 0x3B	; 59
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	eb e3       	ldi	r30, 0x3B	; 59
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_u8SetPinValue+0xb6>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_u8SetPinValue+0xb2>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	98 c0       	rjmp	.+304    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else                                    Local_u8ErrorStatus = STD_TYPES_NOK;  //invalid pin value
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	96 c0       	rjmp	.+300    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			break;
		case DIO_u8_PORTB :
			if(Copy_u8PinValue == DIO_u8_HIGH)      SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	a1 f4       	brne	.+40     	; 0x1124 <DIO_u8SetPinValue+0xf4>
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8SetPinValue+0xea>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8SetPinValue+0xe6>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	7f c0       	rjmp	.+254    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else if (Copy_u8PinValue == DIO_u8_LOW) CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	88 23       	and	r24, r24
    1128:	a9 f4       	brne	.+42     	; 0x1154 <DIO_u8SetPinValue+0x124>
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinValue+0x118>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinValue+0x114>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	67 c0       	rjmp	.+206    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else                                    Local_u8ErrorStatus = STD_TYPES_NOK;  //invalid pin value
    1154:	19 82       	std	Y+1, r1	; 0x01
    1156:	65 c0       	rjmp	.+202    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			break;
		case DIO_u8_PORTC :
			if(Copy_u8PinValue == DIO_u8_HIGH)      SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	a1 f4       	brne	.+40     	; 0x1186 <DIO_u8SetPinValue+0x156>
    115e:	a5 e3       	ldi	r26, 0x35	; 53
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e3       	ldi	r30, 0x35	; 53
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_u8SetPinValue+0x14c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_u8SetPinValue+0x148>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	4e c0       	rjmp	.+156    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else if (Copy_u8PinValue == DIO_u8_LOW) CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	88 23       	and	r24, r24
    118a:	a9 f4       	brne	.+42     	; 0x11b6 <DIO_u8SetPinValue+0x186>
    118c:	a5 e3       	ldi	r26, 0x35	; 53
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8SetPinValue+0x17a>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8SetPinValue+0x176>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	36 c0       	rjmp	.+108    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else                                    Local_u8ErrorStatus = STD_TYPES_NOK;  //invalid pin value
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	34 c0       	rjmp	.+104    	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			break;
		case DIO_u8_PORTD :
			if(Copy_u8PinValue == DIO_u8_HIGH)      SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	a1 f4       	brne	.+40     	; 0x11e8 <DIO_u8SetPinValue+0x1b8>
    11c0:	a2 e3       	ldi	r26, 0x32	; 50
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e2 e3       	ldi	r30, 0x32	; 50
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_u8SetPinValue+0x1ae>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_u8SetPinValue+0x1aa>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	1d c0       	rjmp	.+58     	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else if (Copy_u8PinValue == DIO_u8_LOW) CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	88 23       	and	r24, r24
    11ec:	a9 f4       	brne	.+42     	; 0x1218 <DIO_u8SetPinValue+0x1e8>
    11ee:	a2 e3       	ldi	r26, 0x32	; 50
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e2 e3       	ldi	r30, 0x32	; 50
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8SetPinValue+0x1dc>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8SetPinValue+0x1d8>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			else                                    Local_u8ErrorStatus = STD_TYPES_NOK;  //invalid pin value
    1218:	19 82       	std	Y+1, r1	; 0x01
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <DIO_u8SetPinValue+0x1f2>
			break;
		default :
			Local_u8ErrorStatus = STD_TYPES_NOK; //invalid port number
    121c:	19 82       	std	Y+1, r1	; 0x01
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <DIO_u8SetPinValue+0x1f2>
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;    //invalid pin number
    1220:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus ;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
}
    1224:	26 96       	adiw	r28, 0x06	; 6
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <DIO_u8GETPinValue>:

u8 DIO_u8GETPinValue (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 * Copy_Pu8ReturnedPinValue)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	27 97       	sbiw	r28, 0x07	; 7
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	8a 83       	std	Y+2, r24	; 0x02
    124c:	6b 83       	std	Y+3, r22	; 0x03
    124e:	5d 83       	std	Y+5, r21	; 0x05
    1250:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_Pu8ReturnedPinValue != NULL))
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 30       	cpi	r24, 0x08	; 8
    125a:	08 f0       	brcs	.+2      	; 0x125e <DIO_u8GETPinValue+0x28>
    125c:	78 c0       	rjmp	.+240    	; 0x134e <DIO_u8GETPinValue+0x118>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_u8GETPinValue+0x32>
    1266:	73 c0       	rjmp	.+230    	; 0x134e <DIO_u8GETPinValue+0x118>
	{
		switch(Copy_u8PortId)
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3f 83       	std	Y+7, r19	; 0x07
    1270:	2e 83       	std	Y+6, r18	; 0x06
    1272:	4e 81       	ldd	r20, Y+6	; 0x06
    1274:	5f 81       	ldd	r21, Y+7	; 0x07
    1276:	41 30       	cpi	r20, 0x01	; 1
    1278:	51 05       	cpc	r21, r1
    127a:	59 f1       	breq	.+86     	; 0x12d2 <DIO_u8GETPinValue+0x9c>
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	91 05       	cpc	r25, r1
    1284:	34 f4       	brge	.+12     	; 0x1292 <DIO_u8GETPinValue+0x5c>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	21 15       	cp	r18, r1
    128c:	31 05       	cpc	r19, r1
    128e:	69 f0       	breq	.+26     	; 0x12aa <DIO_u8GETPinValue+0x74>
    1290:	5c c0       	rjmp	.+184    	; 0x134a <DIO_u8GETPinValue+0x114>
    1292:	4e 81       	ldd	r20, Y+6	; 0x06
    1294:	5f 81       	ldd	r21, Y+7	; 0x07
    1296:	42 30       	cpi	r20, 0x02	; 2
    1298:	51 05       	cpc	r21, r1
    129a:	79 f1       	breq	.+94     	; 0x12fa <DIO_u8GETPinValue+0xc4>
    129c:	8e 81       	ldd	r24, Y+6	; 0x06
    129e:	9f 81       	ldd	r25, Y+7	; 0x07
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <DIO_u8GETPinValue+0x72>
    12a6:	3d c0       	rjmp	.+122    	; 0x1322 <DIO_u8GETPinValue+0xec>
    12a8:	50 c0       	rjmp	.+160    	; 0x134a <DIO_u8GETPinValue+0x114>
		{
		case DIO_u8_PORTA:*Copy_Pu8ReturnedPinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);break;
    12aa:	e9 e3       	ldi	r30, 0x39	; 57
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8GETPinValue+0x8c>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8GETPinValue+0x88>
    12c6:	ca 01       	movw	r24, r20
    12c8:	81 70       	andi	r24, 0x01	; 1
    12ca:	ec 81       	ldd	r30, Y+4	; 0x04
    12cc:	fd 81       	ldd	r31, Y+5	; 0x05
    12ce:	80 83       	st	Z, r24
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <DIO_u8GETPinValue+0x11a>
		case DIO_u8_PORTB:*Copy_Pu8ReturnedPinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);break;
    12d2:	e6 e3       	ldi	r30, 0x36	; 54
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8GETPinValue+0xb4>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8GETPinValue+0xb0>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	ec 81       	ldd	r30, Y+4	; 0x04
    12f4:	fd 81       	ldd	r31, Y+5	; 0x05
    12f6:	80 83       	st	Z, r24
    12f8:	2b c0       	rjmp	.+86     	; 0x1350 <DIO_u8GETPinValue+0x11a>
		case DIO_u8_PORTC:*Copy_Pu8ReturnedPinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);break;
    12fa:	e3 e3       	ldi	r30, 0x33	; 51
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_u8GETPinValue+0xdc>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_u8GETPinValue+0xd8>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	ec 81       	ldd	r30, Y+4	; 0x04
    131c:	fd 81       	ldd	r31, Y+5	; 0x05
    131e:	80 83       	st	Z, r24
    1320:	17 c0       	rjmp	.+46     	; 0x1350 <DIO_u8GETPinValue+0x11a>
		case DIO_u8_PORTD:*Copy_Pu8ReturnedPinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);break;
    1322:	e0 e3       	ldi	r30, 0x30	; 48
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_u8GETPinValue+0x104>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_u8GETPinValue+0x100>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	ec 81       	ldd	r30, Y+4	; 0x04
    1344:	fd 81       	ldd	r31, Y+5	; 0x05
    1346:	80 83       	st	Z, r24
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <DIO_u8GETPinValue+0x11a>
		default          :Local_u8ErrorStatus = STD_TYPES_NOK;    //invalid port number
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <DIO_u8GETPinValue+0x11a>
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;    //invalid pin number or wild pointer
    134e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
}
    1352:	27 96       	adiw	r28, 0x07	; 7
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue (u8 Copy_u8PortId , u8 Copy_u8PinId)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_u8TogPinValue+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_u8TogPinValue+0x8>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8a 83       	std	Y+2, r24	; 0x02
    1374:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	08 f0       	brcs	.+2      	; 0x1382 <DIO_u8TogPinValue+0x1e>
    1380:	71 c0       	rjmp	.+226    	; 0x1464 <DIO_u8TogPinValue+0x100>
	{
		switch(Copy_u8PortId)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3d 83       	std	Y+5, r19	; 0x05
    138a:	2c 83       	std	Y+4, r18	; 0x04
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	91 05       	cpc	r25, r1
    1394:	49 f1       	breq	.+82     	; 0x13e8 <DIO_u8TogPinValue+0x84>
    1396:	2c 81       	ldd	r18, Y+4	; 0x04
    1398:	3d 81       	ldd	r19, Y+5	; 0x05
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	2c f4       	brge	.+10     	; 0x13aa <DIO_u8TogPinValue+0x46>
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <DIO_u8TogPinValue+0x5c>
    13a8:	5b c0       	rjmp	.+182    	; 0x1460 <DIO_u8TogPinValue+0xfc>
    13aa:	2c 81       	ldd	r18, Y+4	; 0x04
    13ac:	3d 81       	ldd	r19, Y+5	; 0x05
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	71 f1       	breq	.+92     	; 0x1410 <DIO_u8TogPinValue+0xac>
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	9d 81       	ldd	r25, Y+5	; 0x05
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	e9 f1       	breq	.+122    	; 0x1438 <DIO_u8TogPinValue+0xd4>
    13be:	50 c0       	rjmp	.+160    	; 0x1460 <DIO_u8TogPinValue+0xfc>
		{
		case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_u8TogPinValue+0x7a>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_u8TogPinValue+0x76>
    13e2:	84 27       	eor	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <DIO_u8TogPinValue+0x102>
		case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    13e8:	a8 e3       	ldi	r26, 0x38	; 56
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8TogPinValue+0xa2>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_u8TogPinValue+0x9e>
    140a:	84 27       	eor	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	2b c0       	rjmp	.+86     	; 0x1466 <DIO_u8TogPinValue+0x102>
		case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8TogPinValue+0xca>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8TogPinValue+0xc6>
    1432:	84 27       	eor	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	17 c0       	rjmp	.+46     	; 0x1466 <DIO_u8TogPinValue+0x102>
		case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8TogPinValue+0xf2>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8TogPinValue+0xee>
    145a:	84 27       	eor	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <DIO_u8TogPinValue+0x102>
		default           : Local_u8ErrorStatus = STD_TYPES_NOK;    //invalid port number
    1460:	19 82       	std	Y+1, r1	; 0x01
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <DIO_u8TogPinValue+0x102>
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;    //invalid pin number
    1464:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1466:	89 81       	ldd	r24, Y+1	; 0x01
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId , u8 Copy_u8PortDirection)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	2d 97       	sbiw	r28, 0x0d	; 13
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3d 87       	std	Y+13, r19	; 0x0d
    149c:	2c 87       	std	Y+12, r18	; 0x0c
    149e:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_u8SetPortDirection+0x32>
    14a8:	3e c0       	rjmp	.+124    	; 0x1526 <DIO_u8SetPortDirection+0xae>
    14aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <DIO_u8SetPortDirection+0x46>
    14b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <DIO_u8SetPortDirection+0x60>
    14bc:	a9 c0       	rjmp	.+338    	; 0x1610 <DIO_u8SetPortDirection+0x198>
    14be:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <DIO_u8SetPortDirection+0x52>
    14c8:	55 c0       	rjmp	.+170    	; 0x1574 <DIO_u8SetPortDirection+0xfc>
    14ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    14cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <DIO_u8SetPortDirection+0x5e>
    14d4:	76 c0       	rjmp	.+236    	; 0x15c2 <DIO_u8SetPortDirection+0x14a>
    14d6:	9c c0       	rjmp	.+312    	; 0x1610 <DIO_u8SetPortDirection+0x198>
	{
	case DIO_u8_PORTA :
		switch (Copy_u8PortDirection)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	3b 87       	std	Y+11, r19	; 0x0b
    14e0:	2a 87       	std	Y+10, r18	; 0x0a
    14e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	91 05       	cpc	r25, r1
    14ea:	51 f0       	breq	.+20     	; 0x1500 <DIO_u8SetPortDirection+0x88>
    14ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    14ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	71 f0       	breq	.+28     	; 0x1512 <DIO_u8SetPortDirection+0x9a>
    14f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	31 f0       	breq	.+12     	; 0x150a <DIO_u8SetPortDirection+0x92>
    14fe:	11 c0       	rjmp	.+34     	; 0x1522 <DIO_u8SetPortDirection+0xaa>
		{
		case DIO_u8_OUTPUT          : DIO_u8_DDRA_REG = 0xFF;  break;
    1500:	ea e3       	ldi	r30, 0x3A	; 58
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	80 83       	st	Z, r24
    1508:	84 c0       	rjmp	.+264    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_FLOATING  : DIO_u8_DDRA_REG = 0x00;  break;
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
    1510:	80 c0       	rjmp	.+256    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_PULLED_UP : DIO_u8_DDRA_REG = 0x00;
    1512:	ea e3       	ldi	r30, 0x3A	; 58
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	10 82       	st	Z, r1
		                              DIO_u8_PORTA_REG = 0xFF;/*activate internal pull up resistor*/
    1518:	eb e3       	ldi	r30, 0x3B	; 59
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	80 83       	st	Z, r24
    1520:	78 c0       	rjmp	.+240    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		                              break;
		default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
    1522:	19 82       	std	Y+1, r1	; 0x01
    1524:	76 c0       	rjmp	.+236    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		}
		break;
	case DIO_u8_PORTB :
		switch (Copy_u8PortDirection)
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	39 87       	std	Y+9, r19	; 0x09
    152e:	28 87       	std	Y+8, r18	; 0x08
    1530:	88 85       	ldd	r24, Y+8	; 0x08
    1532:	99 85       	ldd	r25, Y+9	; 0x09
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	51 f0       	breq	.+20     	; 0x154e <DIO_u8SetPortDirection+0xd6>
    153a:	28 85       	ldd	r18, Y+8	; 0x08
    153c:	39 85       	ldd	r19, Y+9	; 0x09
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	71 f0       	breq	.+28     	; 0x1560 <DIO_u8SetPortDirection+0xe8>
    1544:	88 85       	ldd	r24, Y+8	; 0x08
    1546:	99 85       	ldd	r25, Y+9	; 0x09
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	31 f0       	breq	.+12     	; 0x1558 <DIO_u8SetPortDirection+0xe0>
    154c:	11 c0       	rjmp	.+34     	; 0x1570 <DIO_u8SetPortDirection+0xf8>
		{
		case DIO_u8_OUTPUT          : DIO_u8_DDRB_REG = 0xFF;  break;
    154e:	e7 e3       	ldi	r30, 0x37	; 55
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	80 83       	st	Z, r24
    1556:	5d c0       	rjmp	.+186    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_FLOATING  : DIO_u8_DDRB_REG = 0x00;  break;
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	10 82       	st	Z, r1
    155e:	59 c0       	rjmp	.+178    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_PULLED_UP : DIO_u8_DDRB_REG = 0x00;
    1560:	e7 e3       	ldi	r30, 0x37	; 55
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	10 82       	st	Z, r1
		                              DIO_u8_PORTB_REG = 0xFF;/*activate internal pull up resistor*/
    1566:	e8 e3       	ldi	r30, 0x38	; 56
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	80 83       	st	Z, r24
    156e:	51 c0       	rjmp	.+162    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		                              break;
		default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
    1570:	19 82       	std	Y+1, r1	; 0x01
    1572:	4f c0       	rjmp	.+158    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		}
		break;
	case DIO_u8_PORTC :
		switch (Copy_u8PortDirection)
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3f 83       	std	Y+7, r19	; 0x07
    157c:	2e 83       	std	Y+6, r18	; 0x06
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	51 f0       	breq	.+20     	; 0x159c <DIO_u8SetPortDirection+0x124>
    1588:	2e 81       	ldd	r18, Y+6	; 0x06
    158a:	3f 81       	ldd	r19, Y+7	; 0x07
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	71 f0       	breq	.+28     	; 0x15ae <DIO_u8SetPortDirection+0x136>
    1592:	8e 81       	ldd	r24, Y+6	; 0x06
    1594:	9f 81       	ldd	r25, Y+7	; 0x07
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	31 f0       	breq	.+12     	; 0x15a6 <DIO_u8SetPortDirection+0x12e>
    159a:	11 c0       	rjmp	.+34     	; 0x15be <DIO_u8SetPortDirection+0x146>
		{
		case DIO_u8_OUTPUT          : DIO_u8_DDRC_REG = 0xFF;  break;
    159c:	e4 e3       	ldi	r30, 0x34	; 52
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	80 83       	st	Z, r24
    15a4:	36 c0       	rjmp	.+108    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_FLOATING  : DIO_u8_DDRC_REG = 0x00;  break;
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	10 82       	st	Z, r1
    15ac:	32 c0       	rjmp	.+100    	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_PULLED_UP : DIO_u8_DDRC_REG = 0x00;
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	10 82       	st	Z, r1
		                              DIO_u8_PORTC_REG = 0xFF;/*activate internal pull up resistor*/
    15b4:	e5 e3       	ldi	r30, 0x35	; 53
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	80 83       	st	Z, r24
    15bc:	2a c0       	rjmp	.+84     	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		                              break;
		default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
    15be:	19 82       	std	Y+1, r1	; 0x01
    15c0:	28 c0       	rjmp	.+80     	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		}
		break;
	case DIO_u8_PORTD :
		switch (Copy_u8PortDirection)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3d 83       	std	Y+5, r19	; 0x05
    15ca:	2c 83       	std	Y+4, r18	; 0x04
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	51 f0       	breq	.+20     	; 0x15ea <DIO_u8SetPortDirection+0x172>
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	71 f0       	breq	.+28     	; 0x15fc <DIO_u8SetPortDirection+0x184>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <DIO_u8SetPortDirection+0x17c>
    15e8:	11 c0       	rjmp	.+34     	; 0x160c <DIO_u8SetPortDirection+0x194>
		{
		case DIO_u8_OUTPUT          : DIO_u8_DDRD_REG = 0xFF;  break;
    15ea:	e1 e3       	ldi	r30, 0x31	; 49
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_FLOATING  : DIO_u8_DDRD_REG = 0x00;  break;
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	10 82       	st	Z, r1
    15fa:	0b c0       	rjmp	.+22     	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		case DIO_u8_INPUT_PULLED_UP : DIO_u8_DDRD_REG = 0x00;
    15fc:	e1 e3       	ldi	r30, 0x31	; 49
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	10 82       	st	Z, r1
		                              DIO_u8_PORTD_REG = 0xFF;/*activate internal pull up resistor*/
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	80 83       	st	Z, r24
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		                              break;
		default : Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Direction*/
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <DIO_u8SetPortDirection+0x19a>
		}
		break;
		default :  Local_u8ErrorStatus = STD_TYPES_NOK;  /*invalid Port number*/
    1610:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
}
    1614:	2d 96       	adiw	r28, 0x0d	; 13
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue (u8 Copy_u8PortId , u8 Copy_u8PortValue)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <DIO_u8SetPortValue+0x6>
    162c:	00 d0       	rcall	.+0      	; 0x162e <DIO_u8SetPortValue+0x8>
    162e:	0f 92       	push	r0
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3d 83       	std	Y+5, r19	; 0x05
    1644:	2c 83       	std	Y+4, r18	; 0x04
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	d1 f0       	breq	.+52     	; 0x1684 <DIO_u8SetPortValue+0x5e>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <DIO_u8SetPortValue+0x3e>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 f0       	breq	.+24     	; 0x167a <DIO_u8SetPortValue+0x54>
    1662:	1f c0       	rjmp	.+62     	; 0x16a2 <DIO_u8SetPortValue+0x7c>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <DIO_u8SetPortValue+0x68>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <DIO_u8SetPortValue+0x72>
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	80 83       	st	Z, r24
    1682:	10 c0       	rjmp	.+32     	; 0x16a4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	80 83       	st	Z, r24
    168c:	0b c0       	rjmp	.+22     	; 0x16a4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    168e:	e5 e3       	ldi	r30, 0x35	; 53
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	80 83       	st	Z, r24
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	80 83       	st	Z, r24
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <DIO_u8SetPortValue+0x7e>
	default :
		Local_u8ErrorStatus = STD_TYPES_NOK; //invalid port number
    16a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <DIO_u8GETPortValue>:

u8 DIO_u8GETPortValue (u8 Copy_u8PortId , u8 * Copy_Pu8ReturnedPortValue)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <DIO_u8GETPortValue+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <DIO_u8GETPortValue+0x8>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <DIO_u8GETPortValue+0xa>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	7c 83       	std	Y+4, r23	; 0x04
    16c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8ReturnedPortValue != NULL)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	e9 f1       	breq	.+122    	; 0x1750 <DIO_u8GETPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3e 83       	std	Y+6, r19	; 0x06
    16de:	2d 83       	std	Y+5, r18	; 0x05
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	e1 f0       	breq	.+56     	; 0x1722 <DIO_u8GETPortValue+0x6c>
    16ea:	2d 81       	ldd	r18, Y+5	; 0x05
    16ec:	3e 81       	ldd	r19, Y+6	; 0x06
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	2c f4       	brge	.+10     	; 0x16fe <DIO_u8GETPortValue+0x48>
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	61 f0       	breq	.+24     	; 0x1714 <DIO_u8GETPortValue+0x5e>
    16fc:	27 c0       	rjmp	.+78     	; 0x174c <DIO_u8GETPortValue+0x96>
    16fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1700:	3e 81       	ldd	r19, Y+6	; 0x06
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	a1 f0       	breq	.+40     	; 0x1730 <DIO_u8GETPortValue+0x7a>
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	b1 f0       	breq	.+44     	; 0x173e <DIO_u8GETPortValue+0x88>
    1712:	1c c0       	rjmp	.+56     	; 0x174c <DIO_u8GETPortValue+0x96>
		{
		case DIO_u8_PORTA :*Copy_Pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1714:	e9 e3       	ldi	r30, 0x39	; 57
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	eb 81       	ldd	r30, Y+3	; 0x03
    171c:	fc 81       	ldd	r31, Y+4	; 0x04
    171e:	80 83       	st	Z, r24
    1720:	18 c0       	rjmp	.+48     	; 0x1752 <DIO_u8GETPortValue+0x9c>
		case DIO_u8_PORTB :*Copy_Pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1722:	e6 e3       	ldi	r30, 0x36	; 54
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	eb 81       	ldd	r30, Y+3	; 0x03
    172a:	fc 81       	ldd	r31, Y+4	; 0x04
    172c:	80 83       	st	Z, r24
    172e:	11 c0       	rjmp	.+34     	; 0x1752 <DIO_u8GETPortValue+0x9c>
		case DIO_u8_PORTC :*Copy_Pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1730:	e3 e3       	ldi	r30, 0x33	; 51
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	eb 81       	ldd	r30, Y+3	; 0x03
    1738:	fc 81       	ldd	r31, Y+4	; 0x04
    173a:	80 83       	st	Z, r24
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <DIO_u8GETPortValue+0x9c>
		case DIO_u8_PORTD :*Copy_Pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    173e:	e0 e3       	ldi	r30, 0x30	; 48
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	eb 81       	ldd	r30, Y+3	; 0x03
    1746:	fc 81       	ldd	r31, Y+4	; 0x04
    1748:	80 83       	st	Z, r24
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <DIO_u8GETPortValue+0x9c>
		default :
			Local_u8ErrorStatus = STD_TYPES_NOK;    //invalid port number
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <DIO_u8GETPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;        //wild pointer
    1750:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	26 96       	adiw	r28, 0x06	; 6
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <HMOTOR_voidInit>:
#include "HMOTOR_interface.h"

u8 Glopal_u8DOORFLAG = 0;         //the door is closed

void HMOTOR_voidInit (void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Motor_controlPins,Motor_pin1,DIO_u8_OUTPUT);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	66 e0       	ldi	r22, 0x06	; 6
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Motor_controlPins,Motor_pin2,DIO_u8_OUTPUT);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	67 e0       	ldi	r22, 0x07	; 7
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <OpenDoorMotor>:

void OpenDoorMotor(void)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	2e 97       	sbiw	r28, 0x0e	; 14
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
	if(Glopal_u8DOORFLAG == 0)       //the door is closed
    179c:	80 91 b6 00 	lds	r24, 0x00B6
    17a0:	88 23       	and	r24, r24
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <OpenDoorMotor+0x1e>
    17a4:	89 c0       	rjmp	.+274    	; 0x18b8 <OpenDoorMotor+0x130>
	{
		Glopal_u8DOORFLAG = 1;       //the door is open
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 93 b6 00 	sts	0x00B6, r24
		DIO_u8SetPinValue(Motor_controlPins,Motor_pin1,DIO_u8_HIGH);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	66 e0       	ldi	r22, 0x06	; 6
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor_controlPins,Motor_pin2,DIO_u8_LOW);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	67 e0       	ldi	r22, 0x07	; 7
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	aa e7       	ldi	r26, 0x7A	; 122
    17c6:	b4 e4       	ldi	r27, 0x44	; 68
    17c8:	8b 87       	std	Y+11, r24	; 0x0b
    17ca:	9c 87       	std	Y+12, r25	; 0x0c
    17cc:	ad 87       	std	Y+13, r26	; 0x0d
    17ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4a ef       	ldi	r20, 0xFA	; 250
    17de:	54 e4       	ldi	r21, 0x44	; 68
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8f 83       	std	Y+7, r24	; 0x07
    17ea:	98 87       	std	Y+8, r25	; 0x08
    17ec:	a9 87       	std	Y+9, r26	; 0x09
    17ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	2c f4       	brge	.+10     	; 0x1812 <OpenDoorMotor+0x8a>
		__ticks = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	3f c0       	rjmp	.+126    	; 0x1890 <OpenDoorMotor+0x108>
	else if (__tmp > 65535)
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	57 e4       	ldi	r21, 0x47	; 71
    1822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	4c f5       	brge	.+82     	; 0x187c <OpenDoorMotor+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182a:	6b 85       	ldd	r22, Y+11	; 0x0b
    182c:	7c 85       	ldd	r23, Y+12	; 0x0c
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <OpenDoorMotor+0xea>
    1854:	88 ec       	ldi	r24, 0xC8	; 200
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <OpenDoorMotor+0xd8>
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f7       	brne	.-38     	; 0x1854 <OpenDoorMotor+0xcc>
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <OpenDoorMotor+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <OpenDoorMotor+0x114>
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1000);
        DIO_u8SetPinValue(Motor_controlPins,Motor_pin1,DIO_u8_LOW);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	66 e0       	ldi	r22, 0x06	; 6
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Motor_controlPins,Motor_pin2,DIO_u8_LOW);
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	67 e0       	ldi	r22, 0x07	; 7
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
	}
	else
	{

	}
}
    18b8:	2e 96       	adiw	r28, 0x0e	; 14
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <CloseDoorMotor>:

void CloseDoorMotor(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	2e 97       	sbiw	r28, 0x0e	; 14
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
	if(Glopal_u8DOORFLAG == 1)       //the door is closed
    18de:	80 91 b6 00 	lds	r24, 0x00B6
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <CloseDoorMotor+0x1e>
    18e6:	88 c0       	rjmp	.+272    	; 0x19f8 <CloseDoorMotor+0x12e>
	{
		Glopal_u8DOORFLAG = 0;       //the door is closed
    18e8:	10 92 b6 00 	sts	0x00B6, r1
		DIO_u8SetPinValue(Motor_controlPins,Motor_pin2,DIO_u8_HIGH);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	67 e0       	ldi	r22, 0x07	; 7
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor_controlPins,Motor_pin1,DIO_u8_LOW);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	66 e0       	ldi	r22, 0x06	; 6
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	aa e7       	ldi	r26, 0x7A	; 122
    1906:	b4 e4       	ldi	r27, 0x44	; 68
    1908:	8b 87       	std	Y+11, r24	; 0x0b
    190a:	9c 87       	std	Y+12, r25	; 0x0c
    190c:	ad 87       	std	Y+13, r26	; 0x0d
    190e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	6b 85       	ldd	r22, Y+11	; 0x0b
    1912:	7c 85       	ldd	r23, Y+12	; 0x0c
    1914:	8d 85       	ldd	r24, Y+13	; 0x0d
    1916:	9e 85       	ldd	r25, Y+14	; 0x0e
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a ef       	ldi	r20, 0xFA	; 250
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8f 83       	std	Y+7, r24	; 0x07
    192a:	98 87       	std	Y+8, r25	; 0x08
    192c:	a9 87       	std	Y+9, r26	; 0x09
    192e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <CloseDoorMotor+0x88>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <CloseDoorMotor+0x106>
	else if (__tmp > 65535)
    1952:	6f 81       	ldd	r22, Y+7	; 0x07
    1954:	78 85       	ldd	r23, Y+8	; 0x08
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <CloseDoorMotor+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	6b 85       	ldd	r22, Y+11	; 0x0b
    196c:	7c 85       	ldd	r23, Y+12	; 0x0c
    196e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1970:	9e 85       	ldd	r25, Y+14	; 0x0e
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <CloseDoorMotor+0xe8>
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <CloseDoorMotor+0xd6>
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <CloseDoorMotor+0xca>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <CloseDoorMotor+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	9e 81       	ldd	r25, Y+6	; 0x06
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <CloseDoorMotor+0x112>
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1000);
        DIO_u8SetPinValue(Motor_controlPins,Motor_pin1,DIO_u8_LOW);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	66 e0       	ldi	r22, 0x06	; 6
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Motor_controlPins,Motor_pin2,DIO_u8_LOW);
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
	}
	else
	{

	}
}
    19f8:	2e 96       	adiw	r28, 0x0e	; 14
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <HLED_voidLEDInit>:
#include"HLED_config.h"
#include"HLED_interface.h"
#include"HLED_private.h"

void HLED_voidLEDInit(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <HLED_voidLEDInit+0x6>
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	6a 83       	std	Y+2, r22	; 0x02
	/* Configure the pin as output pin */
	DIO_u8SetPinDirection(Copy_u8LEDPort,Copy_u8LEDPin,DIO_u8_OUTPUT);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <HLED_voidLEDON>:
void HLED_voidLEDON(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <HLED_voidLEDON+0x6>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(Copy_u8LEDPort,Copy_u8LEDPin,DIO_u8_HIGH);
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <HLED_voidLEDOFF>:
void HLED_voidLEDOFF(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <HLED_voidLEDOFF+0x6>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(Copy_u8LEDPort,Copy_u8LEDPin,DIO_u8_LOW);
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <HLED_voidLEDToggle>:

void HLED_voidLEDToggle(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <HLED_voidLEDToggle+0x6>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8TogPinValue(Copy_u8LEDPort ,Copy_u8LEDPin);
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	6a 81       	ldd	r22, Y+2	; 0x02
    1a82:	0e 94 b2 09 	call	0x1364	; 0x1364 <DIO_u8TogPinValue>
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <HLCD_voidInit>:
#include "DIO_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"
#include "HLCD_interface.h"
void HLCD_voidInit(void)
{
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	c6 54       	subi	r28, 0x46	; 70
    1a9e:	d0 40       	sbci	r29, 0x00	; 0
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
   /*step 1 : config data port*/
#if(FUNCTION_SET == FUNCTION_SET_8BIT_MODE_2LINES || FUNCTION_SET == FUNCTION_SET_8BIT_MODE_1LINES)
	DIO_u8SetPortDirection(PORT_DATA,DIO_u8_OUTPUT);
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	0e 94 3c 0a 	call	0x1478	; 0x1478 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(PORT_DATA,HLCD_D5_PIN,DIO_u8_OUTPUT);
	DIO_u8SetPinDirection(PORT_DATA,HLCD_D6_PIN,DIO_u8_OUTPUT);
	DIO_u8SetPinDirection(PORT_DATA,HLCD_D7_PIN,DIO_u8_OUTPUT);
#endif
	/*step : config PORT CONTROL*/
	DIO_u8SetPinDirection(PORT_CONTROL,HLCD_RS_PIN,DIO_u8_OUTPUT);
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_CONTROL,HLCD_RW_PIN,DIO_u8_OUTPUT);
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	66 e0       	ldi	r22, 0x06	; 6
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_CONTROL,HLCD_E_PIN,DIO_u8_OUTPUT);
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ed 5b       	subi	r30, 0xBD	; 189
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	a0 ef       	ldi	r26, 0xF0	; 240
    1adc:	b1 e4       	ldi	r27, 0x41	; 65
    1ade:	80 83       	st	Z, r24
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	a2 83       	std	Z+2, r26	; 0x02
    1ae4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	01 5c       	subi	r16, 0xC1	; 193
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	ed 5b       	subi	r30, 0xBD	; 189
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	80 83       	st	Z, r24
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	a2 83       	std	Z+2, r26	; 0x02
    1b12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b14:	fe 01       	movw	r30, r28
    1b16:	ff 96       	adiw	r30, 0x3f	; 63
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <HLCD_voidInit+0xaa>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e af       	std	Y+62, r25	; 0x3e
    1b36:	8d af       	std	Y+61, r24	; 0x3d
    1b38:	46 c0       	rjmp	.+140    	; 0x1bc6 <HLCD_voidInit+0x136>
	else if (__tmp > 65535)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ff 96       	adiw	r30, 0x3f	; 63
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	64 f5       	brge	.+88     	; 0x1bae <HLCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	fe 01       	movw	r30, r28
    1b58:	ed 5b       	subi	r30, 0xBD	; 189
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e af       	std	Y+62, r25	; 0x3e
    1b82:	8d af       	std	Y+61, r24	; 0x3d
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <HLCD_voidInit+0x114>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9c af       	std	Y+60, r25	; 0x3c
    1b8c:	8b af       	std	Y+59, r24	; 0x3b
    1b8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b90:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <HLCD_voidInit+0x102>
    1b96:	9c af       	std	Y+60, r25	; 0x3c
    1b98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	9e af       	std	Y+62, r25	; 0x3e
    1ba2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <HLCD_voidInit+0xf6>
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <HLCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ff 96       	adiw	r30, 0x3f	; 63
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e af       	std	Y+62, r25	; 0x3e
    1bc4:	8d af       	std	Y+61, r24	; 0x3d
    1bc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bca:	9a af       	std	Y+58, r25	; 0x3a
    1bcc:	89 af       	std	Y+57, r24	; 0x39
    1bce:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <HLCD_voidInit+0x142>
    1bd6:	9a af       	std	Y+58, r25	; 0x3a
    1bd8:	89 af       	std	Y+57, r24	; 0x39
#if(FUNCTION_SET == FUNCTION_SET_8BIT_MODE_2LINES || FUNCTION_SET == FUNCTION_SET_8BIT_MODE_1LINES)
	/*step 2: LCD initialization */
	_delay_ms(30);
	HLCD_voidSendCommand(FUNCTION_SET);
    1bda:	88 e3       	ldi	r24, 0x38	; 56
    1bdc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e0       	ldi	r26, 0x00	; 0
    1be6:	b0 e4       	ldi	r27, 0x40	; 64
    1be8:	8d ab       	std	Y+53, r24	; 0x35
    1bea:	9e ab       	std	Y+54, r25	; 0x36
    1bec:	af ab       	std	Y+55, r26	; 0x37
    1bee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	89 ab       	std	Y+49, r24	; 0x31
    1c0a:	9a ab       	std	Y+50, r25	; 0x32
    1c0c:	ab ab       	std	Y+51, r26	; 0x33
    1c0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c10:	69 a9       	ldd	r22, Y+49	; 0x31
    1c12:	7a a9       	ldd	r23, Y+50	; 0x32
    1c14:	8b a9       	ldd	r24, Y+51	; 0x33
    1c16:	9c a9       	ldd	r25, Y+52	; 0x34
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <HLCD_voidInit+0x1a2>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	98 ab       	std	Y+48, r25	; 0x30
    1c2e:	8f a7       	std	Y+47, r24	; 0x2f
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <HLCD_voidInit+0x220>
	else if (__tmp > 65535)
    1c32:	69 a9       	ldd	r22, Y+49	; 0x31
    1c34:	7a a9       	ldd	r23, Y+50	; 0x32
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <HLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c50:	98 ad       	ldd	r25, Y+56	; 0x38
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	98 ab       	std	Y+48, r25	; 0x30
    1c70:	8f a7       	std	Y+47, r24	; 0x2f
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <HLCD_voidInit+0x202>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9e a7       	std	Y+46, r25	; 0x2e
    1c7a:	8d a7       	std	Y+45, r24	; 0x2d
    1c7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <HLCD_voidInit+0x1f0>
    1c84:	9e a7       	std	Y+46, r25	; 0x2e
    1c86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	98 ab       	std	Y+48, r25	; 0x30
    1c90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c94:	98 a9       	ldd	r25, Y+48	; 0x30
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <HLCD_voidInit+0x1e4>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <HLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb4:	9c a7       	std	Y+44, r25	; 0x2c
    1cb6:	8b a7       	std	Y+43, r24	; 0x2b
    1cb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <HLCD_voidInit+0x22c>
    1cc0:	9c a7       	std	Y+44, r25	; 0x2c
    1cc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HLCD_voidSendCommand(DISPLAY_ON_OFF);
    1cc4:	8c e0       	ldi	r24, 0x0C	; 12
    1cc6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e4       	ldi	r27, 0x40	; 64
    1cd2:	8f a3       	std	Y+39, r24	; 0x27
    1cd4:	98 a7       	std	Y+40, r25	; 0x28
    1cd6:	a9 a7       	std	Y+41, r26	; 0x29
    1cd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6f a1       	ldd	r22, Y+39	; 0x27
    1cdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cde:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8b a3       	std	Y+35, r24	; 0x23
    1cf4:	9c a3       	std	Y+36, r25	; 0x24
    1cf6:	ad a3       	std	Y+37, r26	; 0x25
    1cf8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1d00:	9e a1       	ldd	r25, Y+38	; 0x26
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <HLCD_voidInit+0x28c>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9a a3       	std	Y+34, r25	; 0x22
    1d18:	89 a3       	std	Y+33, r24	; 0x21
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <HLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    1d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d20:	8d a1       	ldd	r24, Y+37	; 0x25
    1d22:	9e a1       	ldd	r25, Y+38	; 0x26
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <HLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6f a1       	ldd	r22, Y+39	; 0x27
    1d36:	78 a5       	ldd	r23, Y+40	; 0x28
    1d38:	89 a5       	ldd	r24, Y+41	; 0x29
    1d3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <HLCD_voidInit+0x2ec>
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	98 a3       	std	Y+32, r25	; 0x20
    1d64:	8f 8f       	std	Y+31, r24	; 0x1f
    1d66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d68:	98 a1       	ldd	r25, Y+32	; 0x20
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <HLCD_voidInit+0x2da>
    1d6e:	98 a3       	std	Y+32, r25	; 0x20
    1d70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	89 a1       	ldd	r24, Y+33	; 0x21
    1d74:	9a a1       	ldd	r25, Y+34	; 0x22
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9a a3       	std	Y+34, r25	; 0x22
    1d7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <HLCD_voidInit+0x2ce>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <HLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6b a1       	ldd	r22, Y+35	; 0x23
    1d88:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9a a3       	std	Y+34, r25	; 0x22
    1d98:	89 a3       	std	Y+33, r24	; 0x21
    1d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1da0:	8d 8f       	std	Y+29, r24	; 0x1d
    1da2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <HLCD_voidInit+0x316>
    1daa:	9e 8f       	std	Y+30, r25	; 0x1e
    1dac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_voidSendCommand(CLEAR_DISPLAY);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e0       	ldi	r26, 0x00	; 0
    1dba:	b0 e4       	ldi	r27, 0x40	; 64
    1dbc:	89 8f       	std	Y+25, r24	; 0x19
    1dbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1dc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a ef       	ldi	r20, 0xFA	; 250
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8d 8b       	std	Y+21, r24	; 0x15
    1dde:	9e 8b       	std	Y+22, r25	; 0x16
    1de0:	af 8b       	std	Y+23, r26	; 0x17
    1de2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1de4:	6d 89       	ldd	r22, Y+21	; 0x15
    1de6:	7e 89       	ldd	r23, Y+22	; 0x16
    1de8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dea:	98 8d       	ldd	r25, Y+24	; 0x18
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <HLCD_voidInit+0x376>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <HLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <HLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <HLCD_voidInit+0x3d6>
    1e48:	88 ec       	ldi	r24, 0xC8	; 200
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
    1e50:	89 89       	ldd	r24, Y+17	; 0x11
    1e52:	9a 89       	ldd	r25, Y+18	; 0x12
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <HLCD_voidInit+0x3c4>
    1e58:	9a 8b       	std	Y+18, r25	; 0x12
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9c 8b       	std	Y+20, r25	; 0x14
    1e64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <HLCD_voidInit+0x3b8>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <HLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9c 8b       	std	Y+20, r25	; 0x14
    1e82:	8b 8b       	std	Y+19, r24	; 0x13
    1e84:	8b 89       	ldd	r24, Y+19	; 0x13
    1e86:	9c 89       	ldd	r25, Y+20	; 0x14
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
    1e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8e:	98 89       	ldd	r25, Y+16	; 0x10
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <HLCD_voidInit+0x400>
    1e94:	98 8b       	std	Y+16, r25	; 0x10
    1e96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1e98:	86 e0       	ldi	r24, 0x06	; 6
    1e9a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e4       	ldi	r27, 0x40	; 64
    1ea6:	8b 87       	std	Y+11, r24	; 0x0b
    1ea8:	9c 87       	std	Y+12, r25	; 0x0c
    1eaa:	ad 87       	std	Y+13, r26	; 0x0d
    1eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08
    1eca:	a9 87       	std	Y+9, r26	; 0x09
    1ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <HLCD_voidInit+0x460>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <HLCD_voidInit+0x4de>
	else if (__tmp > 65535)
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <HLCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <HLCD_voidInit+0x4c0>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD_voidInit+0x4ae>
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <HLCD_voidInit+0x4a2>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <HLCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <HLCD_voidInit+0x4ea>
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidSendCommand(ENTRY_MODE_SET &  0xF0);
	HLCD_voidSendCommand(ENTRY_MODE_SET << 4);
	_delay_ms(2);
#endif
}
    1f82:	ca 5b       	subi	r28, 0xBA	; 186
    1f84:	df 4f       	sbci	r29, 0xFF	; 255
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 copy_u8Instruction)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	2f 97       	sbiw	r28, 0x0f	; 15
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
	/*step 1: select RS to be in command mode*/
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_RS_PIN,DIO_u8_LOW);
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	67 e0       	ldi	r22, 0x07	; 7
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
	/*step 2: select R/w to be write*/
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_RW_PIN,DIO_u8_LOW);
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	66 e0       	ldi	r22, 0x06	; 6
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
    /*step 3 : send Instruction*/
#if(FUNCTION_SET == FUNCTION_SET_8BIT_MODE_2LINES || FUNCTION_SET == FUNCTION_SET_8BIT_MODE_1LINES)
    DIO_u8SetPortValue(PORT_DATA,copy_u8Instruction);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fc8:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_u8SetPortValue>
#elif(FUNCTION_SET == FUNCTION_SET_4BIT_MODE_2LINES || FUNCTION_SET ==  FUNCTION_SET_4BIT_MODE_1LINES)
    DIO_void_Set4Bits_Value(PORT_DATA, copy_u8Instruction);
#endif
    /*step 4: Enable E pin */
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_E_PIN,DIO_u8_HIGH);
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	65 e0       	ldi	r22, 0x05	; 5
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 ea       	ldi	r26, 0xA0	; 160
    1fdc:	b0 e4       	ldi	r27, 0x40	; 64
    1fde:	8b 87       	std	Y+11, r24	; 0x0b
    1fe0:	9c 87       	std	Y+12, r25	; 0x0c
    1fe2:	ad 87       	std	Y+13, r26	; 0x0d
    1fe4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a ef       	ldi	r20, 0xFA	; 250
    1ff4:	54 e4       	ldi	r21, 0x44	; 68
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8f 83       	std	Y+7, r24	; 0x07
    2000:	98 87       	std	Y+8, r25	; 0x08
    2002:	a9 87       	std	Y+9, r26	; 0x09
    2004:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2028:	6f 81       	ldd	r22, Y+7	; 0x07
    202a:	78 85       	ldd	r23, Y+8	; 0x08
    202c:	89 85       	ldd	r24, Y+9	; 0x09
    202e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	6b 85       	ldd	r22, Y+11	; 0x0b
    2042:	7c 85       	ldd	r23, Y+12	; 0x0c
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <HLCD_voidSendCommand+0xee>
    206a:	88 ec       	ldi	r24, 0xC8	; 200
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <HLCD_voidSendCommand+0xdc>
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <HLCD_voidSendCommand+0xd0>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <HLCD_voidSendCommand+0x118>
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	/*step 5 : Disable E pin */
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_E_PIN,DIO_u8_LOW);
    20ba:	83 e0       	ldi	r24, 0x03	; 3
    20bc:	65 e0       	ldi	r22, 0x05	; 5
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>

}
    20c4:	2f 96       	adiw	r28, 0x0f	; 15
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 copy_u8Data)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	2f 97       	sbiw	r28, 0x0f	; 15
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
	/*step 1: select RS to be in data mode*/
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_RS_PIN,DIO_u8_HIGH);
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	67 e0       	ldi	r22, 0x07	; 7
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
	/*step 2: select R/w to be write*/
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_RW_PIN,DIO_u8_LOW);
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	66 e0       	ldi	r22, 0x06	; 6
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
#if(FUNCTION_SET == FUNCTION_SET_8BIT_MODE_2LINES || FUNCTION_SET == FUNCTION_SET_8BIT_MODE_1LINES)
	/*step 3 : send data*/
	DIO_u8SetPortValue(PORT_DATA,copy_u8Data);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	6f 85       	ldd	r22, Y+15	; 0x0f
    2104:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_u8SetPortValue>

	/*step 4: Enable E pin */
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_E_PIN,DIO_u8_HIGH);
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	65 e0       	ldi	r22, 0x05	; 5
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 ea       	ldi	r26, 0xA0	; 160
    2118:	b0 e4       	ldi	r27, 0x40	; 64
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <HLCD_voidSendData+0xee>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <HLCD_voidSendData+0xdc>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <HLCD_voidSendData+0xd0>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <HLCD_voidSendData+0x118>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	/*step 5 : Disable E pin */
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_E_PIN,DIO_u8_LOW);
    21f6:	83 e0       	ldi	r24, 0x03	; 3
    21f8:	65 e0       	ldi	r22, 0x05	; 5
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_E_PIN,DIO_u8_HIGH);
	_delay_ms(5);
	/*step 5 : Disable E pin */
	DIO_u8SetPinValue(PORT_CONTROL,HLCD_E_PIN,DIO_u8_LOW);
#endif
}
    2200:	2f 96       	adiw	r28, 0x0f	; 15
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *PtrToString)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <HLCD_voidSendString+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	0e c0       	rjmp	.+28     	; 0x2242 <HLCD_voidSendString+0x30>
	while(PtrToString[i] != '\0')
	{
		HLCD_voidSendData(PtrToString[i]);
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	fc 01       	movw	r30, r24
    2232:	e2 0f       	add	r30, r18
    2234:	f3 1f       	adc	r31, r19
    2236:	80 81       	ld	r24, Z
    2238:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendData>
		i++;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void HLCD_voidSendString(u8 *PtrToString)
{
	u8 i = 0;
	while(PtrToString[i] != '\0')
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	80 81       	ld	r24, Z
    2254:	88 23       	and	r24, r24
    2256:	39 f7       	brne	.-50     	; 0x2226 <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(PtrToString[i]);
		i++;
	}

}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <HLCD_voidSendNumber>:
void HLCD_voidSendNumber(u32 copy_u8Number)
{
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	60 97       	sbiw	r28, 0x10	; 16
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	6d 87       	std	Y+13, r22	; 0x0d
    227e:	7e 87       	std	Y+14, r23	; 0x0e
    2280:	8f 87       	std	Y+15, r24	; 0x0f
    2282:	98 8b       	std	Y+16, r25	; 0x10
   u8 LOC_NumStr[10];
   u8 i=0,j;
    2284:	1a 82       	std	Y+2, r1	; 0x02
    2286:	2d c0       	rjmp	.+90     	; 0x22e2 <HLCD_voidSendNumber+0x7e>
   while(copy_u8Number != 0)
   {
	   LOC_NumStr[i] = copy_u8Number%10 ;
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	08 2f       	mov	r16, r24
    228c:	10 e0       	ldi	r17, 0x00	; 0
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	af 85       	ldd	r26, Y+15	; 0x0f
    2294:	b8 89       	ldd	r27, Y+16	; 0x10
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodsi4>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	28 2f       	mov	r18, r24
    22ac:	ce 01       	movw	r24, r28
    22ae:	03 96       	adiw	r24, 0x03	; 3
    22b0:	fc 01       	movw	r30, r24
    22b2:	e0 0f       	add	r30, r16
    22b4:	f1 1f       	adc	r31, r17
    22b6:	20 83       	st	Z, r18
	   i++;
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	8a 83       	std	Y+2, r24	; 0x02
	   copy_u8Number /= 10;
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	af 85       	ldd	r26, Y+15	; 0x0f
    22c4:	b8 89       	ldd	r27, Y+16	; 0x10
    22c6:	2a e0       	ldi	r18, 0x0A	; 10
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodsi4>
    22d6:	da 01       	movw	r26, r20
    22d8:	c9 01       	movw	r24, r18
    22da:	8d 87       	std	Y+13, r24	; 0x0d
    22dc:	9e 87       	std	Y+14, r25	; 0x0e
    22de:	af 87       	std	Y+15, r26	; 0x0f
    22e0:	b8 8b       	std	Y+16, r27	; 0x10
}
void HLCD_voidSendNumber(u32 copy_u8Number)
{
   u8 LOC_NumStr[10];
   u8 i=0,j;
   while(copy_u8Number != 0)
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	af 85       	ldd	r26, Y+15	; 0x0f
    22e8:	b8 89       	ldd	r27, Y+16	; 0x10
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	a1 05       	cpc	r26, r1
    22ee:	b1 05       	cpc	r27, r1
    22f0:	59 f6       	brne	.-106    	; 0x2288 <HLCD_voidSendNumber+0x24>
   {
	   LOC_NumStr[i] = copy_u8Number%10 ;
	   i++;
	   copy_u8Number /= 10;
   }
   for(j=i-1;j>=0;j--)
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	81 50       	subi	r24, 0x01	; 1
    22f6:	89 83       	std	Y+1, r24	; 0x01
   {
	   HLCD_voidSendData(LOC_NumStr[j] + '0');
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	ce 01       	movw	r24, r28
    2300:	03 96       	adiw	r24, 0x03	; 3
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 81       	ld	r24, Z
    230a:	80 5d       	subi	r24, 0xD0	; 208
    230c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendData>
	   if(j == 0)break;
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	88 23       	and	r24, r24
    2314:	21 f0       	breq	.+8      	; 0x231e <HLCD_voidSendNumber+0xba>
   {
	   LOC_NumStr[i] = copy_u8Number%10 ;
	   i++;
	   copy_u8Number /= 10;
   }
   for(j=i-1;j>=0;j--)
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	81 50       	subi	r24, 0x01	; 1
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	ed cf       	rjmp	.-38     	; 0x22f8 <HLCD_voidSendNumber+0x94>
	   HLCD_voidSendData(LOC_NumStr[j] + '0');
	   if(j == 0)break;
   }


}
    231e:	60 96       	adiw	r28, 0x10	; 16
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	08 95       	ret

00002334 <HLCD_voidClearDisplay>:
void HLCD_voidClearDisplay()
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
#if(FUNCTION_SET == FUNCTION_SET_8BIT_MODE_2LINES || FUNCTION_SET == FUNCTION_SET_8BIT_MODE_1LINES)
	HLCD_voidSendCommand(CLEAR_DISPLAY);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
#elif(FUNCTION_SET == FUNCTION_SET_4BIT_MODE_2LINES || FUNCTION_SET ==  FUNCTION_SET_4BIT_MODE_1LINES)
	HLCD_voidSendCommand(CLEAR_DISPLAY & 0xF0 );
	HLCD_voidSendCommand(CLEAR_DISPLAY << 4 );
#endif
}
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <HLCD_voidSetPosition>:
void HLCD_voidSetPosition(u8 copy_rowIndx,u8 copy_colIndx)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <HLCD_voidSetPosition+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <HLCD_voidSetPosition+0x8>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	6a 83       	std	Y+2, r22	; 0x02
#if(FUNCTION_SET == FUNCTION_SET_8BIT_MODE_2LINES || FUNCTION_SET == FUNCTION_SET_8BIT_MODE_1LINES)
		if(copy_colIndx >= 0 && copy_colIndx <= 15)
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	80 31       	cpi	r24, 0x10	; 16
    235c:	c0 f4       	brcc	.+48     	; 0x238e <HLCD_voidSetPosition+0x46>
		{
          switch(copy_rowIndx)
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	3c 83       	std	Y+4, r19	; 0x04
    2366:	2b 83       	std	Y+3, r18	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	31 f0       	breq	.+12     	; 0x237c <HLCD_voidSetPosition+0x34>
    2370:	2b 81       	ldd	r18, Y+3	; 0x03
    2372:	3c 81       	ldd	r19, Y+4	; 0x04
    2374:	21 30       	cpi	r18, 0x01	; 1
    2376:	31 05       	cpc	r19, r1
    2378:	31 f0       	breq	.+12     	; 0x2386 <HLCD_voidSetPosition+0x3e>
    237a:	09 c0       	rjmp	.+18     	; 0x238e <HLCD_voidSetPosition+0x46>
          {
          case 0:
        	  HLCD_voidSendCommand(SET_DDRAM_ADDRESS + copy_colIndx);
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 58       	subi	r24, 0x80	; 128
    2380:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
    2384:	04 c0       	rjmp	.+8      	; 0x238e <HLCD_voidSetPosition+0x46>
        	  break;
          case 1:
        	  HLCD_voidSendCommand(SET_DDRAM_ADDRESS + HLCD_SECOND_ROW_ADDRESS_OFFSET+ copy_colIndx);
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 54       	subi	r24, 0x40	; 64
    238a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>

			  }

		   }
#endif
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <HLCD_voidSendCustomized>:
void HLCD_voidSendCustomized(u8 * PtrCustomChar,u8 copy_CharID)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <HLCD_voidSendCustomized+0x6>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <HLCD_voidSendCustomized+0x8>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9b 83       	std	Y+3, r25	; 0x03
    23aa:	8a 83       	std	Y+2, r24	; 0x02
    23ac:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	/*set AC to point to CGRAM address*/
	 HLCD_voidSendCommand(SET_CGRAM_ADDRESS + copy_CharID * 8);
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	08 96       	adiw	r24, 0x08	; 8
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>

	 /*send character pattern to be written in CGRAM */
	 for(i=0;i<7;i++)
    23c6:	19 82       	std	Y+1, r1	; 0x01
    23c8:	0e c0       	rjmp	.+28     	; 0x23e6 <HLCD_voidSendCustomized+0x4a>
	 {
		 HLCD_voidSendData(PtrCustomChar[i]);
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	fc 01       	movw	r30, r24
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	80 81       	ld	r24, Z
    23dc:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendData>
	u8 i;
	/*set AC to point to CGRAM address*/
	 HLCD_voidSendCommand(SET_CGRAM_ADDRESS + copy_CharID * 8);

	 /*send character pattern to be written in CGRAM */
	 for(i=0;i<7;i++)
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	8f 5f       	subi	r24, 0xFF	; 255
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	87 30       	cpi	r24, 0x07	; 7
    23ea:	78 f3       	brcs	.-34     	; 0x23ca <HLCD_voidSendCustomized+0x2e>
	 {
		 HLCD_voidSendData(PtrCustomChar[i]);
	 }
	 /*return AC to point to DDRAM address*/
	 HLCD_voidSendCommand(SET_DDRAM_ADDRESS);
    23ec:	80 e8       	ldi	r24, 0x80	; 128
    23ee:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_voidSendCommand>
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <HLCD_voidprintCustomized>:
void HLCD_voidprintCustomized(u8 copy_CharID)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendData(copy_CharID);
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendData>
}
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <main>:
void Relay_voidLED(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue);
void Relay_voidDOOR(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue);


int main(void)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	HLED_voidLEDInit(DIO_u8_PORTA,DIO_u8_PIN0);
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <HLED_voidLEDInit>
	HLED_voidLEDInit(DIO_u8_PORTA,DIO_u8_PIN1);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	61 e0       	ldi	r22, 0x01	; 1
    2430:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <HLED_voidLEDInit>
	HLED_voidLEDInit(DIO_u8_PORTA,DIO_u8_PIN2);
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <HLED_voidLEDInit>
	HLCD_voidInit();
    243c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <HLCD_voidInit>
	HMOTOR_voidInit();
    2440:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HMOTOR_voidInit>

	MUART_voidUARTInit();
    2444:	0e 94 a3 05 	call	0xb46	; 0xb46 <MUART_voidUARTInit>

	Relay_voidInit(DIO_u8_PORTB,DIO_u8_PIN0);   //Control the Door
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Relay_voidInit>



	u8 Local_u8UserOption;

	Display_Welcome_Screen();
    2450:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Display_Welcome_Screen>
	while(1)
	{
		Local_u8UserOption = MUART_u8ReceiveData();
    2454:	0e 94 f5 05 	call	0xbea	; 0xbea <MUART_u8ReceiveData>
    2458:	89 83       	std	Y+1, r24	; 0x01
		MUART_voidTransmitData(Local_u8UserOption);
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidTransmitData>
		/*************************** Control the LED ***************************/
		if(Local_u8UserOption == '1')
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	81 33       	cpi	r24, 0x31	; 49
    2464:	09 f0       	breq	.+2      	; 0x2468 <main+0x4e>
    2466:	78 c0       	rjmp	.+240    	; 0x2558 <main+0x13e>
		{
			HLCD_voidClearDisplay();
    2468:	0e 94 9a 11 	call	0x2334	; 0x2334 <HLCD_voidClearDisplay>
			HLCD_voidSetPosition(0,0);
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
			HLCD_voidSendString("1-ON 2-OFF");
    2474:	80 e6       	ldi	r24, 0x60	; 96
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
			Local_u8UserOption = MUART_u8ReceiveData();
    247c:	0e 94 f5 05 	call	0xbea	; 0xbea <MUART_u8ReceiveData>
    2480:	89 83       	std	Y+1, r24	; 0x01
			MUART_voidTransmitData(Local_u8UserOption);
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidTransmitData>
			if(Local_u8UserOption == '1')
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	81 33       	cpi	r24, 0x31	; 49
    248c:	89 f5       	brne	.+98     	; 0x24f0 <main+0xd6>
			{
				HLCD_voidClearDisplay();
    248e:	0e 94 9a 11 	call	0x2334	; 0x2334 <HLCD_voidClearDisplay>
				HLCD_voidSetPosition(0,0);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
				HLCD_voidSendString("1-LED1 2-LED2");
    249a:	8b e6       	ldi	r24, 0x6B	; 107
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
				HLCD_voidSetPosition(1,3);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
				HLCD_voidSendString("3-LED3");
    24aa:	89 e7       	ldi	r24, 0x79	; 121
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
				Local_u8UserOption = MUART_u8ReceiveData();
    24b2:	0e 94 f5 05 	call	0xbea	; 0xbea <MUART_u8ReceiveData>
    24b6:	89 83       	std	Y+1, r24	; 0x01
				MUART_voidTransmitData(Local_u8UserOption);
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidTransmitData>
				if(Local_u8UserOption == '1')          HLED_voidLEDON(DIO_u8_PORTA,DIO_u8_PIN0);
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	81 33       	cpi	r24, 0x31	; 49
    24c2:	29 f4       	brne	.+10     	; 0x24ce <main+0xb4>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <HLED_voidLEDON>
    24cc:	6d c0       	rjmp	.+218    	; 0x25a8 <main+0x18e>
				else if(Local_u8UserOption == '2')     HLED_voidLEDON(DIO_u8_PORTA,DIO_u8_PIN1);
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	82 33       	cpi	r24, 0x32	; 50
    24d2:	29 f4       	brne	.+10     	; 0x24de <main+0xc4>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <HLED_voidLEDON>
    24dc:	65 c0       	rjmp	.+202    	; 0x25a8 <main+0x18e>
				else if(Local_u8UserOption == '3')     HLED_voidLEDON(DIO_u8_PORTA,DIO_u8_PIN2);
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	83 33       	cpi	r24, 0x33	; 51
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <main+0xcc>
    24e4:	61 c0       	rjmp	.+194    	; 0x25a8 <main+0x18e>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	62 e0       	ldi	r22, 0x02	; 2
    24ea:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <HLED_voidLEDON>
    24ee:	5c c0       	rjmp	.+184    	; 0x25a8 <main+0x18e>
			}
			/*Led off*/
			else if(Local_u8UserOption== '2')
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	82 33       	cpi	r24, 0x32	; 50
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <main+0xde>
    24f6:	58 c0       	rjmp	.+176    	; 0x25a8 <main+0x18e>
			{
				HLCD_voidClearDisplay();
    24f8:	0e 94 9a 11 	call	0x2334	; 0x2334 <HLCD_voidClearDisplay>
				HLCD_voidSetPosition(0,0);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
				HLCD_voidSendString("1-LED1 2-LED2");
    2504:	8b e6       	ldi	r24, 0x6B	; 107
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
				HLCD_voidSetPosition(1,3);
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	63 e0       	ldi	r22, 0x03	; 3
    2510:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
				HLCD_voidSendString("3-LED3");
    2514:	89 e7       	ldi	r24, 0x79	; 121
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
				Local_u8UserOption = MUART_u8ReceiveData();
    251c:	0e 94 f5 05 	call	0xbea	; 0xbea <MUART_u8ReceiveData>
    2520:	89 83       	std	Y+1, r24	; 0x01
				MUART_voidTransmitData(Local_u8UserOption);
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidTransmitData>
				if(Local_u8UserOption == '1')          HLED_voidLEDOFF(DIO_u8_PORTA,DIO_u8_PIN0);
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	81 33       	cpi	r24, 0x31	; 49
    252c:	29 f4       	brne	.+10     	; 0x2538 <main+0x11e>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <HLED_voidLEDOFF>
    2536:	38 c0       	rjmp	.+112    	; 0x25a8 <main+0x18e>
				else if(Local_u8UserOption == '2')     HLED_voidLEDOFF(DIO_u8_PORTA,DIO_u8_PIN1);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	82 33       	cpi	r24, 0x32	; 50
    253c:	29 f4       	brne	.+10     	; 0x2548 <main+0x12e>
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <HLED_voidLEDOFF>
    2546:	30 c0       	rjmp	.+96     	; 0x25a8 <main+0x18e>
				else if(Local_u8UserOption == '3')     HLED_voidLEDOFF(DIO_u8_PORTA,DIO_u8_PIN2);
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	83 33       	cpi	r24, 0x33	; 51
    254c:	69 f5       	brne	.+90     	; 0x25a8 <main+0x18e>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	62 e0       	ldi	r22, 0x02	; 2
    2552:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <HLED_voidLEDOFF>
    2556:	28 c0       	rjmp	.+80     	; 0x25a8 <main+0x18e>
			}
		}
		/************************control the door**************************/
		else if (Local_u8UserOption == '2')
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	82 33       	cpi	r24, 0x32	; 50
    255c:	29 f5       	brne	.+74     	; 0x25a8 <main+0x18e>
		{
			HLCD_voidClearDisplay();
    255e:	0e 94 9a 11 	call	0x2334	; 0x2334 <HLCD_voidClearDisplay>
			HLCD_voidSetPosition(0,0);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
			HLCD_voidSendString("1-Open 2-Close");
    256a:	80 e8       	ldi	r24, 0x80	; 128
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
			Local_u8UserOption = MUART_u8ReceiveData();
    2572:	0e 94 f5 05 	call	0xbea	; 0xbea <MUART_u8ReceiveData>
    2576:	89 83       	std	Y+1, r24	; 0x01
			MUART_voidTransmitData(Local_u8UserOption);
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MUART_voidTransmitData>
			if(Local_u8UserOption == '1')
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	81 33       	cpi	r24, 0x31	; 49
    2582:	41 f4       	brne	.+16     	; 0x2594 <main+0x17a>
			{
				Relay_voidDOOR(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_HIGH);
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 15 13 	call	0x262a	; 0x262a <Relay_voidDOOR>
				OpenDoorMotor();
    258e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <OpenDoorMotor>
    2592:	0a c0       	rjmp	.+20     	; 0x25a8 <main+0x18e>
			}
			else if(Local_u8UserOption == '2')
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	82 33       	cpi	r24, 0x32	; 50
    2598:	39 f4       	brne	.+14     	; 0x25a8 <main+0x18e>
		    {
				Relay_voidDOOR(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	0e 94 15 13 	call	0x262a	; 0x262a <Relay_voidDOOR>
				CloseDoorMotor();
    25a4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CloseDoorMotor>
			}


		}
		Display_Welcome_Screen();
    25a8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Display_Welcome_Screen>
    25ac:	53 cf       	rjmp	.-346    	; 0x2454 <main+0x3a>

000025ae <Display_Welcome_Screen>:
}



void Display_Welcome_Screen (void)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidClearDisplay();
    25b6:	0e 94 9a 11 	call	0x2334	; 0x2334 <HLCD_voidClearDisplay>
	HLCD_voidSetPosition(0,0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
	HLCD_voidSendString("1-LED ON/OFF");
    25c2:	8f e8       	ldi	r24, 0x8F	; 143
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
	HLCD_voidSetPosition(1,0);
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	0e 94 a4 11 	call	0x2348	; 0x2348 <HLCD_voidSetPosition>
	HLCD_voidSendString("2-Open/Close Door");
    25d2:	8c e9       	ldi	r24, 0x9C	; 156
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendString>
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <Relay_voidInit>:


void Relay_voidInit(u8 Copy_u8PortId, u8 Copy_u8PinId) { //PIN1 PORTC
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <Relay_voidInit+0x6>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinDirection(Copy_u8PortId, Copy_u8PinId, DIO_u8_OUTPUT);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	6a 81       	ldd	r22, Y+2	; 0x02
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_u8SetPinDirection>
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <Relay_voidLED>:
void Relay_voidLED(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <Relay_voidLED+0x6>
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	6a 83       	std	Y+2, r22	; 0x02
    2612:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8PortId, Copy_u8PinId, Copy_u8PinValue);
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	6a 81       	ldd	r22, Y+2	; 0x02
    2618:	4b 81       	ldd	r20, Y+3	; 0x03
    261a:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <Relay_voidDOOR>:
void Relay_voidDOOR(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <Relay_voidDOOR+0x6>
    2630:	0f 92       	push	r0
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	6a 83       	std	Y+2, r22	; 0x02
    263a:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8PortId, Copy_u8PinId, Copy_u8PinValue);
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	6a 81       	ldd	r22, Y+2	; 0x02
    2640:	4b 81       	ldd	r20, Y+3	; 0x03
    2642:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8SetPinValue>
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <__udivmodsi4>:
    2652:	a1 e2       	ldi	r26, 0x21	; 33
    2654:	1a 2e       	mov	r1, r26
    2656:	aa 1b       	sub	r26, r26
    2658:	bb 1b       	sub	r27, r27
    265a:	fd 01       	movw	r30, r26
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <__udivmodsi4_ep>

0000265e <__udivmodsi4_loop>:
    265e:	aa 1f       	adc	r26, r26
    2660:	bb 1f       	adc	r27, r27
    2662:	ee 1f       	adc	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	a2 17       	cp	r26, r18
    2668:	b3 07       	cpc	r27, r19
    266a:	e4 07       	cpc	r30, r20
    266c:	f5 07       	cpc	r31, r21
    266e:	20 f0       	brcs	.+8      	; 0x2678 <__udivmodsi4_ep>
    2670:	a2 1b       	sub	r26, r18
    2672:	b3 0b       	sbc	r27, r19
    2674:	e4 0b       	sbc	r30, r20
    2676:	f5 0b       	sbc	r31, r21

00002678 <__udivmodsi4_ep>:
    2678:	66 1f       	adc	r22, r22
    267a:	77 1f       	adc	r23, r23
    267c:	88 1f       	adc	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	1a 94       	dec	r1
    2682:	69 f7       	brne	.-38     	; 0x265e <__udivmodsi4_loop>
    2684:	60 95       	com	r22
    2686:	70 95       	com	r23
    2688:	80 95       	com	r24
    268a:	90 95       	com	r25
    268c:	9b 01       	movw	r18, r22
    268e:	ac 01       	movw	r20, r24
    2690:	bd 01       	movw	r22, r26
    2692:	cf 01       	movw	r24, r30
    2694:	08 95       	ret

00002696 <__prologue_saves__>:
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	ca 1b       	sub	r28, r26
    26c0:	db 0b       	sbc	r29, r27
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	09 94       	ijmp

000026ce <__epilogue_restores__>:
    26ce:	2a 88       	ldd	r2, Y+18	; 0x12
    26d0:	39 88       	ldd	r3, Y+17	; 0x11
    26d2:	48 88       	ldd	r4, Y+16	; 0x10
    26d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26da:	8c 84       	ldd	r8, Y+12	; 0x0c
    26dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26de:	aa 84       	ldd	r10, Y+10	; 0x0a
    26e0:	b9 84       	ldd	r11, Y+9	; 0x09
    26e2:	c8 84       	ldd	r12, Y+8	; 0x08
    26e4:	df 80       	ldd	r13, Y+7	; 0x07
    26e6:	ee 80       	ldd	r14, Y+6	; 0x06
    26e8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ea:	0c 81       	ldd	r16, Y+4	; 0x04
    26ec:	1b 81       	ldd	r17, Y+3	; 0x03
    26ee:	aa 81       	ldd	r26, Y+2	; 0x02
    26f0:	b9 81       	ldd	r27, Y+1	; 0x01
    26f2:	ce 0f       	add	r28, r30
    26f4:	d1 1d       	adc	r29, r1
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	ed 01       	movw	r28, r26
    2702:	08 95       	ret

00002704 <_exit>:
    2704:	f8 94       	cli

00002706 <__stop_program>:
    2706:	ff cf       	rjmp	.-2      	; 0x2706 <__stop_program>
